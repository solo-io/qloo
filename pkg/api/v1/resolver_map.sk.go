// Code generated by solo-kit. DO NOT EDIT.

package v1

import (
	"sort"

	"github.com/solo-io/go-utils/hashutils"
	"github.com/solo-io/solo-kit/pkg/api/v1/clients/kube/crd"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources"
	"github.com/solo-io/solo-kit/pkg/api/v1/resources/core"
	"github.com/solo-io/solo-kit/pkg/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

func NewResolverMap(namespace, name string) *ResolverMap {
	resolvermap := &ResolverMap{}
	resolvermap.SetMetadata(core.Metadata{
		Name:      name,
		Namespace: namespace,
	})
	return resolvermap
}

func (r *ResolverMap) SetMetadata(meta core.Metadata) {
	r.Metadata = meta
}

func (r *ResolverMap) SetStatus(status core.Status) {
	r.Status = status
}

func (r *ResolverMap) Hash() uint64 {
	metaCopy := r.GetMetadata()
	metaCopy.ResourceVersion = ""
	return hashutils.HashAll(
		metaCopy,
		r.Types,
	)
}

type ResolverMapList []*ResolverMap

// namespace is optional, if left empty, names can collide if the list contains more than one with the same name
func (list ResolverMapList) Find(namespace, name string) (*ResolverMap, error) {
	for _, resolverMap := range list {
		if resolverMap.GetMetadata().Name == name {
			if namespace == "" || resolverMap.GetMetadata().Namespace == namespace {
				return resolverMap, nil
			}
		}
	}
	return nil, errors.Errorf("list did not find resolverMap %v.%v", namespace, name)
}

func (list ResolverMapList) AsResources() resources.ResourceList {
	var ress resources.ResourceList
	for _, resolverMap := range list {
		ress = append(ress, resolverMap)
	}
	return ress
}

func (list ResolverMapList) AsInputResources() resources.InputResourceList {
	var ress resources.InputResourceList
	for _, resolverMap := range list {
		ress = append(ress, resolverMap)
	}
	return ress
}

func (list ResolverMapList) Names() []string {
	var names []string
	for _, resolverMap := range list {
		names = append(names, resolverMap.GetMetadata().Name)
	}
	return names
}

func (list ResolverMapList) NamespacesDotNames() []string {
	var names []string
	for _, resolverMap := range list {
		names = append(names, resolverMap.GetMetadata().Namespace+"."+resolverMap.GetMetadata().Name)
	}
	return names
}

func (list ResolverMapList) Sort() ResolverMapList {
	sort.SliceStable(list, func(i, j int) bool {
		return list[i].GetMetadata().Less(list[j].GetMetadata())
	})
	return list
}

func (list ResolverMapList) Clone() ResolverMapList {
	var resolverMapList ResolverMapList
	for _, resolverMap := range list {
		resolverMapList = append(resolverMapList, resources.Clone(resolverMap).(*ResolverMap))
	}
	return resolverMapList
}

func (list ResolverMapList) Each(f func(element *ResolverMap)) {
	for _, resolverMap := range list {
		f(resolverMap)
	}
}

func (list ResolverMapList) EachResource(f func(element resources.Resource)) {
	for _, resolverMap := range list {
		f(resolverMap)
	}
}

func (list ResolverMapList) AsInterfaces() []interface{} {
	var asInterfaces []interface{}
	list.Each(func(element *ResolverMap) {
		asInterfaces = append(asInterfaces, element)
	})
	return asInterfaces
}

var _ resources.Resource = &ResolverMap{}

// Kubernetes Adapter for ResolverMap

func (o *ResolverMap) GetObjectKind() schema.ObjectKind {
	t := ResolverMapCrd.TypeMeta()
	return &t
}

func (o *ResolverMap) DeepCopyObject() runtime.Object {
	return resources.Clone(o).(*ResolverMap)
}

var ResolverMapCrd = crd.NewCrd("sqoop.solo.io",
	"resolvermaps",
	"sqoop.solo.io",
	"v1",
	"ResolverMap",
	"rm",
	false,
	&ResolverMap{})
